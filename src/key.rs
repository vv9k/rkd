#[derive(Clone,Debug,PartialEq,Eq,Hash)]
#[rustfmt::skip]
pub enum Key {
    Num0,
    Num1,
    Num2,
    Num3,
    Num4,
    Num5,
    Num6,
    Num7,
    Num8,
    Num9,
    Dash,
    Tick,
    Eq_,
    Dot,
    Comma,
    Slash,
    SemiColon,
    Apostrophe,
    BackSlash,
    LSquareBracket, RSquareBracket,
    RAlt, LAlt,
    Alt,
    RCtrl, LCtrl,
    Ctrl,
    RShift, LShift,
    Shift,
    Super,
    Esc,
    Backspace,
    Return,
    Space,
    Tab,
    A, B, C, D, E, F, G, H, I, J, K, L, M,
    N, O, P, Q, R, S, T, U, V, W, X, Y, Z,
    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
    Up, Down, Left, Right,
    UK
}
impl From<&str> for Key {
    fn from(token: &str) -> Self {
        use self::Key::*;
        match token.to_lowercase().as_ref() {
            "0" => Num0,
            "1" => Num1,
            "2" => Num2,
            "3" => Num3,
            "4" => Num4,
            "5" => Num5,
            "6" => Num6,
            "7" => Num7,
            "8" => Num8,
            "9" => Num9,
            "-" => Dash,
            "`" => Tick,
            "=" => Eq_,
            "." => Dot,
            "," => Comma,
            "/" => Slash,
            ";" => SemiColon,
            "'" => Apostrophe,
            "\\" => BackSlash,
            "[" => LSquareBracket,
            "]" => RSquareBracket,
            "alt" => Alt,
            "ctrl" => Ctrl,
            "shift" => Shift,
            "super" => Super,
            "esc" => Esc,
            "backspace" => Backspace,
            "return" => Return,
            "space" => Space,
            "tab" => Tab,
            "a" => A,
            "b" => B,
            "c" => C,
            "d" => D,
            "e" => E,
            "f" => F,
            "g" => G,
            "h" => H,
            "i" => I,
            "j" => J,
            "k" => K,
            "l" => L,
            "m" => M,
            "n" => N,
            "o" => O,
            "p" => P,
            "q" => Q,
            "r" => R,
            "s" => S,
            "t" => T,
            "u" => U,
            "v" => V,
            "w" => W,
            "x" => X,
            "y" => Y,
            "z" => Z,
            "f1" => F1,
            "f2" => F2,
            "f3" => F3,
            "f4" => F4,
            "f5" => F5,
            "f6" => F6,
            "f7" => F7,
            "f8" => F8,
            "f9" => F9,
            "f10" => F10,
            "f11" => F11,
            "f12" => F12,
            "up" => Up,
            "down" => Down,
            "left" => Left,
            "right" => Right,
            _ => UK,
        }
    }
}
impl Key {
    pub fn from_code(code: u16) -> Self {
        use self::Key::*;
        match code {
            1 => Esc,
            2 => Num1,
            3 => Num2,
            4 => Num3,
            5 => Num4,
            6 => Num5,
            7 => Num6,
            8 => Num7,
            9 => Num8,
            10 => Num9,
            11 => Num0,
            12 => Dash,
            13 => Eq_,
            14 => Backspace,
            15 => Tab,
            16 => Q,
            17 => W,
            18 => E,
            19 => R,
            20 => T,
            21 => Y,
            22 => U,
            23 => I,
            24 => O,
            25 => P,
            26 => LSquareBracket,
            27 => RSquareBracket,
            28 => Return,
            29 => Ctrl, // LCtrl
            30 => A,
            31 => S,
            32 => D,
            33 => F,
            34 => G,
            35 => H,
            36 => J,
            37 => K,
            38 => L,
            39 => SemiColon,
            40 => Apostrophe,
            41 => Tick,
            42 => Shift, // LShift
            43 => BackSlash,
            44 => Z,
            45 => X,
            46 => C,
            47 => V,
            48 => B,
            49 => N,
            50 => M,
            51 => Comma,
            52 => Dot,
            53 => Slash,
            54 => Shift, // RShift
            56 => Alt,   // LAlt
            57 => Space,
            59 => F1,
            60 => F2,
            61 => F3,
            62 => F4,
            63 => F5,
            64 => F6,
            65 => F7,
            66 => F8,
            67 => F9,
            68 => F10,
            69 => F11,
            70 => F12,
            97 => Ctrl, // RCtrl
            100 => Alt, // RAlt
            103 => Up,
            105 => Left,
            106 => Right,
            108 => Down,
            125 => Super,
            _ => UK,
        }
    }
}
